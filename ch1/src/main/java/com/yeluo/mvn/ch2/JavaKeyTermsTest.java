package com.yeluo.mvn.ch2;
/**
 * 
 * @author YeLuo45
 *
 */
/* java “白皮书”的关键术语
 * 1.简单性：第一，Java语法是C++语法的一“纯净”版本（没有头文件、指针运算和语法、结构、联合、操作符重载、虚基类等
 * 这些C++中的不适当的特性）；第二，是因为Java小。Java的目标之一就是支持开发能够在小型机器上独立运行的软件。
 * 
 * 2.面向对象：简单地讲，面向对象设计是一种程序设计技术。它讲重点放在数据（即对象）和对象的接口上。
 * 面向对象思想是同人类的用自然思维去分析、设计和解决问题的，与面向过程是相对的。
 * 面向对象的三个基本要素是继承、封装和多态。
 * 面向对象的5个基本设计原则：
 * 1.单一职责原则：核心思想为：一个类，最好只做一件事，只有燕一个引起它的变化。
 * 单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。
 * 2.开放封闭原则：核心思想为：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放（添加新的需求或变化），对修改封闭的（原来的代码）。
 * 实现开放封闭原则的核心思想就是对抽象编程，而不对具体编程，因为抽象就是相对稳定的让类依赖于固定的抽象，所以修改就是封闭的；
 * 而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写来改变固有行为，实现新的拓展方法，所以就是开放的。
 * 3.Liskov替换原则：核心思想为：子类必须能够替换起基类。
 * 4.依赖倒置原则：核心思想为：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。
 * 抽，象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是面向对象设计的精髓，也是依赖倒置原则的核心。
 * 5.接口隔离原则：核心思想为：使用多个小的专门的接口，而不要使用一个大的总接口。
 * 具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，
 * 这是一种接口污染。
 * 
 * 3.网络技能：Java有一个扩展的例程库，用于处理像HTTP和FTP之类TCP/IP协议。Java应用程序能够通过URL打开和访问网络上的对象，
 * 起便捷程度就好像访问本地文件一样。
 * 
 * 4.健壮性：Java投入了大量的精力进行早期的问题检测、后期的动态（运行时）检测，并消除了有出错倾向的状态
 * Java和C++最大的不同在于Java采用的指针模型可以消除重写内存的损坏数据的可能性。
 * 
 * 5.安全性:Java适用于网络/分布式环境。使用Java可以构建防病毒、防篡改的系统。
 * 从一开始，Java就设计成能够防范各种攻击，其中包括：
 * 1.运行时堆栈溢出。如，蠕虫等病毒常用的攻击手段。
 * 2.在自己处理空间之外破坏内存。
 * 3.未经授权读写文件。
 * 
 * 6.体系结构中立：Java编译器生成与特定的计算机体系结构无关的字节码指令来事项这一特性。
 * 精心设计的字节码不仅可以很容易地在任何机器上执行，而且还可以迅速地翻译成本地机器的代码。
 * 
 * 7.可移植性：在Java中，数据类型具有固定的大小，这消除了代码移植时令人头痛的主要问题。
 * 二进制数据以固定的格式进行存储和传输，消除了字节顺序的困扰。字符串使用标准的Unicode格式存储的。
 * 作为系统组成的部分的类库，定义了可移植的接口。
 * 
 * 8.解释型：Java解释器可以在任何移植了解释器的机器上执行Java字节码。
 * 由于链接是一个增量式且轻量级的过程，所以，开发过程也变得更加快捷，更加具有探索性。
 * 
 * 9.高性能：即时编译器，即时编译器可以监控经常执行哪些代码并优化这些代码以提高速度。更为复杂的优化是消除函数调用（内嵌）。
 * 即时编译器知道哪些类已经加载。如果基于当前加载的类集，且特定的函数不被覆盖的话就可以内嵌。必要时，还可以撤销优化。
 * 
 * 10.多线程：多线程可以带来更好的交互响应和实时行为。在不同的机器上，只是调用多线程的代码完全相同；
 * Java把多线程的实现交给了底层的操作系统或线程库来完成。
 * 尽管如此，多线程编译的简单性是Java成为颇具美丽的服务器端开发语言的主要原因之一。、、
 * 
 * 11.动态性：当需要将某些代码添加在正在运行的程序中，动态性将是一个非常重要的特性。
 * Java的当前版本允许程序员知道对象的结构和行为。这对于必须在运行时分析对象的系统来说是非常有用。
 * 这些系统有：Java GUI构建器、智能调试器、可插拔组件以及对象数据库。
 *
 * 
 * 
 */
public class JavaKeyTermsTest {

}
